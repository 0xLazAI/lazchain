name: Kubernetes Deploy Test

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]
    types: [synchronize, opened, reopened, converted_to_draft, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.14.0
        with:
          minikube version: 'v1.35.0'
          kubernetes version: 'v1.33.0'
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker  # Use docker driver which supports mounting
          start args: --memory 4096 --cpus 4  # Add sufficient resources

      - name: Verify Minikube setup
        run: |
          minikube status
          kubectl get nodes
          kubectl version
          kubectl get namespaces

      - name: Setup Kustomize
        uses: fluxcd/pkg/actions/kustomize@main

      - name: Create necessary directories and verify mounts
        run: |
          cd devops
          mkdir -p configs/node
          echo "test config" > configs/node/test.conf
          
          # Verify directory contents before mounting
          echo "Contents of configs/node directory:"
          ls -la configs/node
          cat configs/node/test.conf

          # Start mounts with verbose output
          echo "Starting directory mounts..."
          minikube mount ./configs/node:/data/node1 &
          echo "Mount 1 PID: $!"
          minikube mount ./configs/node:/data/node2 &
          echo "Mount 2 PID: $!"
          minikube mount ./configs/node:/data/node3 &
          echo "Mount 3 PID: $!"
          
          # Wait for mounts and verify they're working
          sleep 10

      - name: Run deployment tests
        run: |
          cd devops

          # Create namespace
          kubectl create namespace hyperion --dry-run=client -o yaml | kubectl apply -f -

          # Deploy Kustomize configuration
          echo "Applying Kustomize manifests..."
          kustomize build k8s | kubectl apply -f -

          # Add extended monitoring during deployment
          echo "Monitoring pod status during initialization..."
          for i in {1..10}; do
            kubectl get pods -n hyperion
            sleep 3
          done

          # Check resource status with more details
          echo "Current cluster state with details:"
          kubectl get all -n hyperion -o wide
          kubectl get pvc -n hyperion
          kubectl get pv -n hyperion

          # Debug pending pods
          echo "Checking events for pending pods..."
          kubectl get events -n hyperion --sort-by='.lastTimestamp'

          # Debug CrashLoopBackOff pod
          if kubectl get pod seq1-0 -n hyperion &> /dev/null; then
            echo "Fetching logs from seq1-0 (previous attempt)..."
            kubectl logs seq1-0 -n hyperion --previous
          
            echo "Describing seq1-0 pod..."
            kubectl describe pod seq1-0 -n hyperion
          fi

          # Wait for StatefulSet to be ready
          echo "Waiting for StatefulSet pods to be ready..."
          if ! kubectl wait --for=condition=ready pod -l app=seq1 -n hyperion --timeout=300s; then
            echo "Pods failed to become ready within timeout"
            kubectl describe pods -l app=seq1 -n hyperion
            
            # Additional debug information
            echo "StatefulSet details:"
            kubectl describe statefulset seq1 -n hyperion
            
            echo "Container logs for seq1-0:"
            kubectl logs seq1-0 -c mala -n hyperion || true
            kubectl logs seq1-0 -c reth -n hyperion || true

            echo "Container logs for seq2-0:"
            kubectl logs seq2-0 -c mala -n hyperion || true
            kubectl logs seq2-0 -c reth -n hyperion || true

            echo "Container logs for seq3-0:"
            kubectl logs seq3-0 -c mala -n hyperion || true
            kubectl logs seq3-0 -c reth -n hyperion || true

            exit 1
          fi

          # Rest of your verification steps...
          echo "Verifying StatefulSet..."
          if ! kubectl get statefulset seq1 -n hyperion &> /dev/null; then
            echo "StatefulSet seq1 not found"
            exit 1
          fi
          
          DESIRED_REPLICAS=$(kubectl get statefulset seq1 -n hyperion -o jsonpath='{.spec.replicas}')
          READY_REPLICAS=$(kubectl get statefulset seq1 -n hyperion -o jsonpath='{.status.readyReplicas}')
          
          echo "Desired replicas: $DESIRED_REPLICAS"
          echo "Ready replicas: $READY_REPLICAS"
          
          if [ "$READY_REPLICAS" -ne "$DESIRED_REPLICAS" ]; then
            echo "Not all replicas are ready"
            kubectl describe statefulset seq1 -n hyperion
            exit 1
          fi
          
          echo "Retrieving mala container logs..."
          kubectl logs seq1-0 -c mala -n hyperion -f --tail=100

      - name: Cleanup
        if: always()
        run: |
          cd devops
          kustomize build k8s | kubectl delete -f - --ignore-not-found=true
          minikube stop
          minikube delete
